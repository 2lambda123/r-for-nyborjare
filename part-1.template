---
title: Grundkurs i R
author: Love Hansson och Thomas Reinholdsson
job: Pensionsmyndigheten
widgets: [quiz]
ext_widgets: {rCharts: "libraries/highcharts"}
framework: {{framework}}
mode: selfcontained
hitheme: {{hitheme}}
---

<style>
   slide {
      background-color: white;
   }
   body {
      background-color: white;
   }
   .title-slide {
      background-color: white;
   }
   article p {
      margin-bottom: 10px;
      margin-top: 10px;
   }
   pre code {
   {{#handout}}
      background: white;
   {{/handout}}
   {{^handout}}
      background: #f8f8ff;
   {{/handout}}
   }

</style>

## Om denna presentation

- Vad är detta?
- Hur rendera "PowerPoint" och hur rendera print-kopior (med hjälp av Whisker-parametrar)
- Länkar till källkod

---


## Lärandemål

- Förstå skillnaden på patchwork-språk som SAS och äkta programmeringsspråk som R
- Sammanställa deskriptiv statistik om data med enklare funktioner
- Använda ggplot och grafiska funktioner för deskription och exploration av data
- Använda och förstå ett flertal datastrukturer
- Installera och använda paket
- Hämta data från olika källor (Excel, MiDAS, Coldbir, Pedal)
- Lagra data i olika format
- Självständigt inhämta ny kunskap och hitta svar på frågor om R (vara en del av R:s community)

---

## Datastrukturer

Det finns flera olika datatyper som används inom R, de vanligaste listas nedan:

- Vektorer
- Listor
- Faktorer
- Matriser
- "Data frames"

---

### Vektorer

De vanligaste typerna av vektorer är:

```{r}
logical <- c(T, FALSE, TRUE, FALSE)
numeric <- c(1, 2.5, 4.5)
integer <- c(1L, 6L, 10L)
character <- c("these are", "some strings")
```

Man kan lägga samman vektorer och de "plattas" då ut:

```{r, eval=FALSE}
c(1, 2, 3, 4)
c(1, c(2, c(3, 4)))
```

---

För att testa eller se vilken datatyp en variabel är:

```{r, eval=FALSE}
typeof(integer)
is.integer(integer)
is.double(integer)
```

Man kan även kontrollera för om det är en vektor:

```{r, eval=FALSE}
is.vector(integer)
```

---

Vektorer kan enbart innehålla en datatyp. När man kombinerar flera olika datatyper, så får man tänka på att de konverteras till en och samma typ.

```{r, eval=FALSE}
c("a", 1)
c("a", T)
c(1, T, F)
```

När logiska vektorer (`TRUE`/`FALSE`) konverteras så ersätts de med `1` och `0`. Därav kan man t.ex. använda sig av `sum()`.

---

### Listor

Listor kan innehålla olika typer av vektorer:

```{r, eval=FALSE}
x <- list(1:3, "a", c(T, F, T), c(2.3, 5.9))
```

Dessutom så kan de innehålla ytterligare listor, vilket medför att de ibland kallas ibland för __recursive vectors__.

```{r, eval=FALSE}
x <- list(list(1,2), list("a","b","c"), 5:9)
str(x)
```

---

{{#handout}}

### Attribut och namn

Alla objekt kan ha attribut kopplade till sig. T.ex. använder man ofta namn för listor och vektorer.

```{r, eval=FALSE}
# Vektorer
x <- c(a = 1, b = 2, "c" = 3)
x
```

Man kan även ändra eller lägga till namn i efterhand:

```{r, eval=FALSE}
names(x) <- c("x", "y", "z")
```

```{r, eval=FALSE}
# Listor
x <- list(a = 1, b = 2, list(c = 3, d = 4))
```

---

{{/handout}}

### Faktorer

Faktorer inkluderar en slags uppslagstabell för kodvärden:

```{r, eval=FALSE}
x <- factor(c("a", "b", "b", "a"))
x
levels(x)
```

---

**Observera** att man **INTE** bör kombinera två faktorvariabler:

```{r, eval=FALSE}
c(factor("a"), factor("b"))
```

Därför kan det ofta vara bättre att jobba med `character` snarare än `factor`.

---

### Matriser

```{r, eval=FALSE}
matrix(1:6, ncol = 3)
array(1:12, c(2, 3, 2))
```

---

### Data frames

`data.frame` är det vanligaste sättet att lagra data i R. Det flexibla tabellformatet gör det enkelt att bearbeta data och använda för dataanalys.

```{r, eval=FALSE}
data.frame(x = 1:3, y = c("a", "b", "c"))
```

Eftersom det kan vara problematiskt att jobba med faktorer, så kan man ange med argumentet `stringsAsFactors = FALSE` att text ska vara `character`:

```{r, eval=FALSE}
df <- data.frame(
  x = 1:3, 
  y = c("a", "b", "c"), 
  stringsAsFactors = FALSE
)
```

---

## Quiz

1. Val1
2. Val2
3. Val3

***.hint

Testhint

***.explanation

Testförklaring

---

## Subsetting

När vi har data vill vi kunna arbeta med delar av data. Detta kallas __subsetting__.

Valet av metod för att hämta ut delar av data beror på vilken __datatyp__ vi använder oss av.

R erbjuder __flera metoder__ för att hämta ut data för varje datatyp.

---

### Grundläggande operationer

Data i R lagras i en __datastruktur__. Om vi anropar hela strukturen får vi, vanligtvis, ut _all_ data i strukturen.

För att hämta delar av data ur en struktur använder vi metoder kallade __operatorer__ på strukturen.

Det finns tre sådana operatorer:
- __[__: Hämta ett subset av data som matchar en uppsättning kriterier
- __[[__: Hämta ett enda namngivet värde ur en datastruktur
- __$__: Hämta en namngiven variabel/kolumn ur en sammansatt datastruktur

Operatorerna anges direkt efter ett anrop av en datastruktur, på formen __mindata$id__ eller __minlista[2]__.

---

### Enkla vektorer

Data:
```{r,results="hide"}
x <- c(aa=2.1, bb=4.2, cc=3.3, dd=5.4)
```

Metoder för dataextrahering:
```{r,results="hide"}
x[c(1,2)] # Välj ett eller flera element
x[order(x)] # Välj alla element, sorterade
x[['aa']] # Välj ett, namngivet eller numrerat, element
```

---

### Listor

De metoder som fungerar för listor fungerar _oftast_ även för vektorer.

Data:
```{r,results="hide"}
ll <- list(2.1, 4.2, 3.3, 5.4)
```

Metoder för dataextrahering:
```{r,results="hide"}
ll[c(1,2)]
ll[[1]]

```

---

### data.frame()

data.frame är R:s grundläggande datastruktur för data på tabellform.

Data:
```{r,results="hide"}
DF <- data.frame(id=c(1:3),
value=c("Love", "Thomas", "Ole"))
```


Urval kan göras kolumnvis, radvis, eller enligt vissa kriterier. Observera kommatecknet i []-anropet!
```{r,results="hide"}
DF[c(1,2),] # Väljer raderna 1 och 2
DF[,c("value")] # Väljer kolumnen "value"
DF[DF$value=="Ole",] # Välj den rad där "value" == "Ole"
```

---

### data.table()

data.table fungerar ungefär som data.frame, men skiljer sig i vissa detaljer.

```{r,results="hide"}
require(data.table)
DT <- data.table(id=c(4:6),
value=c("Cédric", "Elin", "Ingemar"))
```

Radvis urval fungerar som i data.frames, men kolumnvis urval skiljer sig markant. data.table ger även möjligheten att genomföra SQL-liknande beräkningar utan att behöva använda yttre funktioner.

```{r,results="hide"}
DT[c(1:2)] # Väljer raderna 1 och 2
DT[,list(value)] # Väljer kolumnen "value"
DT[,id2 := (5-id),by=id] # Skapar en ny variabel med värdena {1,0,-1}
```
<small>Observera att kommatecknet kan utelämnas i första exemplet!</small>

---

### Sortering och sampling

Två vanliga operationer på data är __sortering__ och __sampling__.

Sortering görs, något kontraintuitivt, _inte_ med kommandot __sort()__ utan med kommandot __order()__:
```{r,results="hide"}
DT[order(DT$id)] # Genomför en "proc sort" på tabellen DF
# DT[sort(DT$id2)] # Genererar ett fel
```

Sampling kan göras med kommandot __sample()__:
```{r,results="hide"}
# Sampla en vektor
vektor <- c(1:1000)
vektor_sample <- sample(vektor, 100)

# Sampla rader ur en data.frame
DT <- data.table(id=c(1:1000),namn=rep(c("Ny","Gammal"))) # Skapa tabell
antalrader <- nrow(DT) # Antal rader i tabellen
DT <- DT[sample(antalrader,10)] # Sampla tio rader ur DT

```
<small>OBS! Ibland genererar R inget fel vid användning av __sort()__, men producerar felaktiga resultat. __sort()__ bör användas med stor försiktighet.</small>

---

## En grundläggande "vokabulär"

Nyckeln till framgångsrik utveckling i R är att behärska ett antal __basfunktioner__ samt de metoder som är anpassade för det problem man vill lösa.

I detta avsnitt går vi igenom en liten uppsättning kommandon som utgör en del av R:s basfunktionalitet.

---

### Grunderna

```r
# De första funktionerna att lära sig
?
str

# Operatorer
%in%, match
=, <-
head, tail

# Logik
&, |, !, xor
all, any

# Flödeskontroll
if, &, |
for, while

```

---

### Matematik

```r
# Jämförelser
!=, ==, >, >=, <, <=
is.na

# Grundläggande matematik
max, min, prod, sum
mean, median, cor, sd, var
```

---


### Datatyper

```r
# Vektorer och matriser
c, matrix
length, dim, ncol, nrow
cbind, rbind
names, colnames, rownames

# Konverteringar
as.data.frame, as.list, as.character, as.numeric

# Städning och minneshantering
rm
gc
memory.size
tables

```

---



### I/O

```r
# Output
print, cat

# Läsa och skriva data
data
read.csv, write.csv,
fread
load, save
library(foreign)
```

---

## Funktioner

En viktig del av att utveckla i R är att arbeta med, och skapa, __funktioner__.

Funktioner används för att __återanvända kod__, hantera __tillfällig minnesanvändning__ och att skapa en __strukturerad programsyntax__.

Funktioner kan, med lite god vilja, liknas vid ett SAS-makro. Åtminstone om man bortser från att SAS-makron inte följer samma syntax som vanlig SAS-kod.

---

### Att skriva funktioner

En funktion består av en __argumentlista__ och en __kodmassa__ (och lite annat).

- Argumentlista: `function(x,y)`
- Kodmassa: `{ return(x^2+y) }`

---

### Exempel på funktioner

```{r, eval=FALSE}
sq <- function(x) {
   x^2
}
sq(5)
```

```{r, eval=FALSE}
binom_coeff <- function(x,y) {
   numerator <- factorial(x)
   denominator <- factorial(y) * factorial(x-y)
   return(numerator/denominator)
}
binom_coeff(5,2)
```

---

## Pakethantering

R:s basfunktionalitet utvidgas med hjälp av funktioner.

Dessa är lagrade i __paket__ som kan läsas in i på begäran.

De flesta paket är lagrade på R-projektets paketserver __CRAN__.


---

### Ladda ett paket i R

Ett paket laddas med någon av funtionerna `require()` eller `library()`:

```{r,results="hide", warning=F, eval=FALSE}
require(stats)
library(class)
```

De funktioner som ingår i paketet kan nu användas i R:

```{r, eval=FALSE}
x <- rnorm(1000,0,1) # Skapa 1000 värden ~ N(0,1)
y <- rep(1:10,100) # Skapa indexvariabel
lm(y ~ x) # Använd funktion ur stats-paketet för linjär regression
```

---

### Installera nya paket

R har en inbyggd pakethantering som kan ladda ned och installera nya paket. De flesta paket är lagrade på __CRAN__ och kan installeras därifrån med funktionen `install.packages()`:

```{r, eval=F}
install.packages("ggplot2") # Installera paketet ggplot2 från CRAN
```

Vissa paket är lagrade på open source-plattformen __GitHub__, och installeras därifrån med hjälp av funktionen `install_github()` i `devtools`-paketet:

```{r, eval=F}
require(devtools)

# Installera Coldbir-paketet från GitHub
install_github("Coldbir","SwedishPensionsAgency")
```

---

## RStudio

RStudio är en kraftfull utvecklingsmiljö (IDE) för R.

Utöver en skripteditor och en R-kommandorad innehåller RStudio många funktioner för att __granska och utvärdera kod__, visa __programdokumentation__ och presentera __grafik__, m.m.

![bild]

---

### Utvärdera kod

Genom att skriva namnet på en funktion utan parenteser visas funktionens kod direkt i R-terminalen:

```{r, eval=F}
lm # Visar källkoden för funktionen lm
```

RStudio innehåller även en __source browser__ som kan visa källkoden som ett skript. Browsern aktiveras genom att markera namnet på en funktion och trycka __F2__.

Många primitiva funktioner i R är dock skrivna i C och redan färdigkompilerade, vilket gör att source browsern inte innehåller någon värdefull information.

```{r, eval=F}
sum # Källkoden till denna funktion kan inte visas
```

---

### Tabbkomplettering och hjälpfiler

Genom att börja skriva namnet på en funktion och trycka på tabb-tangenten i RStudio visas en lista över de kommandon som liknar det som skrivits, samt en liten hjälptext.

![bild]

Genom att markera namnet på en funktion och trycka på __F1__ visas en hjälpfil.

![bild2]

---

## Grafik och dataanalys

- ggplot2
- iPlot
- rCharts

---

### `ggplot2`

Paket baserat på "*grammar of graphics*" för att enkelt skapa grafer i R. Skapat av Hadley Wickham.

Exempel på tillämpningsområden:
- interaktivt direkt i R-konsolen
- applikationer, t.ex. `iPlot`
- publikationer, t.ex. Orange rapport

Ladda paket:

```{r, warning=F}
library(ggplot2)
```

---

#### Density plot

```{r, warning=F}
ggplot(diamonds, aes(depth, fill = cut)) + 
   geom_density(alpha = 0.2) + xlim(55, 70)
```

---

#### Histogram

```{r, warning=F,message=F}
ggplot(diamonds, aes(x=price, fill=cut)) + geom_bar()
```

---

#### Scatter plot

```{r, warning=F,message=F}
ggplot(diamonds, aes(x = price, y = depth, color = clarity)) + geom_point() + facet_grid(color ~ cut)
```

---

### iPlot

[http://ltcstats.perriard.se/shiny/iplot/diamonds/](http://ltcstats.perriard.se/shiny/iplot/diamonds/)

---

### rCharts

```{r, warning=F,message=F,results='asis',cache=F, echo=2:4}
library(rCharts)
a <- Highcharts$new()
# ...
a$chart(type = "spline")
a$series(data = c(1, 3, 2, 4, 5, 4, 6, 2, 3, 5, NA), dashStyle = "longdash")
a$series(data = c(NA, 4, 1, 3, 4, 2, 9, 1, 2, 3, 4), dashStyle = "shortdot")
a$legend(symbolWidth = 80)

a$print()
```

---

## Externa datakällor

- Excel
- SQL Server (t.ex. PEDAL)
- Coldbir (t.ex. MIDAS)

---

### Excel

För inläsning av textfiler så finns det funktioner i R man kan använda sig av, t.ex.:

```{r, eval=F}
x <- read.csv2("fil.csv")
```

Det finns motsvarande funktion för att skriva till CSV, se t.ex. `write.csv2`. Se även `*.table`, `*.delim2`.

För inläsning av `xls` eller `xlsx` använd paketet `XLConnect`:

```{r, eval=F}
library(XLConnect)
x <- readWorksheetFromFile("fil.xlsx", sheet = 1)
```

Läs mer: [XLConnect - A platform-independent interface to Excel](http://cran.r-project.org/web/packages/XLConnect/vignettes/XLConnect.pdf).

---

### SQL Server

`RODBC`:

```{r, eval=F}
con <- odbcDriverConnect("driver=SQL Server; server=pedal")
x <- sqlQuery("SELECT * FROM PedalDIM.Arende.Process")
close(con)
```

`pmtools`:

```{r, eval=F}
x <- pedal_query("SELECT * FROM PedalDIM.Arende.Process")
```

alternativ, använd SQL-kod från fil:

```{r, eval=F}
x <- pedal_query(file = "process.sql")
```

---

### Coldbir

Coldbir är en kolumndatabas i R - en vidareutveckling av tidigare midAUX (MIDAS).

Paketet har som mål att med lite kod och simpel syntax erbjuda snabb läs-/skrivhastighet, för att göra det enklare och snabbare att analysera data i R.

Dessutom finns stöd för hantering av dokumentation (t.ex. beskrivning av variabler).

---

Ladda paket:

```{r, eval=F}
library(Coldbir)
```

Skapa ny databaskoppling och ange sökväg:

```{r, eval=F}
a <- cdb('Q:/myDatabase')
```

Än sålänge har inget skapats - det är först när data läggs till som detta sker, därav lägger vi till ett dataset:

```{r, eval=F}
a[] <- ggplot2::diamonds
```

---

Hämta dataset:

```{r, eval=F}
dt <- a[]
```

Hämta variabel:

```{r, eval=F}
var <- a["cut"]
```

Skapa ny variabel:

```{r, eval=F}
a["x_plus_y"] <- a["x"] + a["y"]
```

Tänk på att de bör ha samma längd.

---

### Coldbir: MIDAS

Anslut till databas

```{r, eval=F}
a <- cdb("//psysstat5w/G/MidasCDB", na = 0)
```

Som ni ser så kan man även ange `na = 0` för att ersätta `NA`-värden med `0`.

Lista samtliga variabler

```{r, eval=F}
get_vars(a)
```

Ange `dims = T` för att inkludera dimensioner

```{r, eval=F}
get_vars(a, dims = T)
```

---

Hämta data för variabel

```{r, eval=F}
x <- a["KON", 2012]
head(x, 10)
# [1] <NA>   <NA>   <NA>   <NA>   <NA>   Kvinna <NA>   Man    <NA>   <NA>  
# Levels: Kvinna Man
```

där `a` anger objektet för kopplingen till databasen, och därefter följer variabelnamn (case-sensitive) och val av dimension (`2012`). Om variabeln saknat dimensioner så hade anropet varit `a["KON"]`, eller med flera dimensioner `a["KON", c(2012, 12)]`.

---

Hämta variabeldokumentation:

```{r, eval=F}
get_doc(a, "SEKTORTILLHORIGH")
```

För att hämta enbart titel:

```{r, eval=F}
get_doc(a, "SEKTORTILLHORIGH")$title
```

Antal individer per sektortillhörighet:

```{r, eval=F}
table(a["SEKTORTILLHORIGH", 2010])
```

---

Skapa en barplot med samma fördelning:

```{r, eval=F}
variable <- "SEKTORTILLHORIGH"
year <- 2010
freq <- table(a[variable, year])
par(mar=c(7.5, 20, 5 , 5))
barplot(freq, horiz = T, las = 1)
```

![](img/sektortillhorigh1.png)

---

Barplot med titel och källa:

```{r, eval=F}
docs <- get_doc(a, variable)
barplot(freq, horiz = T, las = 1, main = paste(docs$title, year), sub = paste("Källa:", docs$source))
```

![](img/sektortillhorigh2.png)

---

## Best practices för programdesign

---

## Att lära sig mer om R

Att programmera är, framförallt i början, ofta att stöta på problem. Funktioner gör inte det man förväntat sig, man saknar kännedom om vissa metoder eller förstår inte viss syntax.

En av styrkorna med R är det utomordentliga nätverk av engagerade och kunniga utvecklare som samlas kring vissa online-portaler, särskilt __GitHub__ och __StackOverflow__.

Ofta är svaret på en fråga bara en Google-sökning bort. Det kan ibland vara svårt att veta exakt vad man ska söka på, men efter ett tag brukar det vara lätt att se ungefär vilken typ av sökning som ger bra svar.

Ofta är den första träffen vid en googling en sida på [StackOverflow](http://www.stackoverflow.com/).

![bild]

---

### Att söka efter mer information

Det finns gott om böcker om R-programmering, men dessa är ofta helt onödiga för att lära sig R-programmering, särskilt i början.

Genom att utveckla en bra sökteknik kan man ofta hitta svar på frågor blixtsnabbt.

All kommunikation kring R sker i regel på engelska.

---

## Avslutning och utblick



---

## Kurslitteratur och referenser

### Böcker
- [Advanced R programming](http://adv-r.had.co.nz) av Hadley Wickham

### R-paket
- `ggplot2` av Hadley Wickham
- `slidify` av Ramnath Vaidyanathan
